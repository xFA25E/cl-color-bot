;;;; color-bot.lisp

(in-package #:color-bot)

(defparameter json:*json-symbols-package* :color-bot)

(let ((web-colors (make-hash-table :test #'equal)))
  ;; Copied from emacs's SHR-COLOR-HTML-COLORS-ALIST
  (dolist (color-pair '(("AliceBlue"            . "#F0F8FF")
                        ("AntiqueWhite"         . "#FAEBD7")
                        ("Aqua"                 . "#00FFFF")
                        ("Aquamarine"           . "#7FFFD4")
                        ("Azure"                . "#F0FFFF")
                        ("Beige"                . "#F5F5DC")
                        ("Bisque"               . "#FFE4C4")
                        ("Black"                . "#000000")
                        ("BlanchedAlmond"       . "#FFEBCD")
                        ("Blue"                 . "#0000FF")
                        ("BlueViolet"           . "#8A2BE2")
                        ("Brown"                . "#A52A2A")
                        ("BurlyWood"            . "#DEB887")
                        ("CadetBlue"            . "#5F9EA0")
                        ("Chartreuse"           . "#7FFF00")
                        ("Chocolate"            . "#D2691E")
                        ("Coral"                . "#FF7F50")
                        ("CornflowerBlue"       . "#6495ED")
                        ("Cornsilk"             . "#FFF8DC")
                        ("Crimson"              . "#DC143C")
                        ("Cyan"                 . "#00FFFF")
                        ("DarkBlue"             . "#00008B")
                        ("DarkCyan"             . "#008B8B")
                        ("DarkGoldenRod"        . "#B8860B")
                        ("DarkGray"             . "#A9A9A9")
                        ("DarkGrey"             . "#A9A9A9")
                        ("DarkGreen"            . "#006400")
                        ("DarkKhaki"            . "#BDB76B")
                        ("DarkMagenta"          . "#8B008B")
                        ("DarkOliveGreen"       . "#556B2F")
                        ("Darkorange"           . "#FF8C00")
                        ("DarkOrchid"           . "#9932CC")
                        ("DarkRed"              . "#8B0000")
                        ("DarkSalmon"           . "#E9967A")
                        ("DarkSeaGreen"         . "#8FBC8F")
                        ("DarkSlateBlue"        . "#483D8B")
                        ("DarkSlateGray"        . "#2F4F4F")
                        ("DarkSlateGrey"        . "#2F4F4F")
                        ("DarkTurquoise"        . "#00CED1")
                        ("DarkViolet"           . "#9400D3")
                        ("DeepPink"             . "#FF1493")
                        ("DeepSkyBlue"          . "#00BFFF")
                        ("DimGray"              . "#696969")
                        ("DimGrey"              . "#696969")
                        ("DodgerBlue"           . "#1E90FF")
                        ("FireBrick"            . "#B22222")
                        ("FloralWhite"          . "#FFFAF0")
                        ("ForestGreen"          . "#228B22")
                        ("Fuchsia"              . "#FF00FF")
                        ("Gainsboro"            . "#DCDCDC")
                        ("GhostWhite"           . "#F8F8FF")
                        ("Gold"                 . "#FFD700")
                        ("GoldenRod"            . "#DAA520")
                        ("Gray"                 . "#808080")
                        ("Grey"                 . "#808080")
                        ("Green"                . "#008000")
                        ("GreenYellow"          . "#ADFF2F")
                        ("HoneyDew"             . "#F0FFF0")
                        ("HotPink"              . "#FF69B4")
                        ("IndianRed"            . "#CD5C5C")
                        ("Indigo"               . "#4B0082")
                        ("Ivory"                . "#FFFFF0")
                        ("Khaki"                . "#F0E68C")
                        ("Lavender"             . "#E6E6FA")
                        ("LavenderBlush"        . "#FFF0F5")
                        ("LawnGreen"            . "#7CFC00")
                        ("LemonChiffon"         . "#FFFACD")
                        ("LightBlue"            . "#ADD8E6")
                        ("LightCoral"           . "#F08080")
                        ("LightCyan"            . "#E0FFFF")
                        ("LightGoldenRodYellow" . "#FAFAD2")
                        ("LightGray"            . "#D3D3D3")
                        ("LightGrey"            . "#D3D3D3")
                        ("LightGreen"           . "#90EE90")
                        ("LightPink"            . "#FFB6C1")
                        ("LightSalmon"          . "#FFA07A")
                        ("LightSeaGreen"        . "#20B2AA")
                        ("LightSkyBlue"         . "#87CEFA")
                        ("LightSlateGray"       . "#778899")
                        ("LightSlateGrey"       . "#778899")
                        ("LightSteelBlue"       . "#B0C4DE")
                        ("LightYellow"          . "#FFFFE0")
                        ("Lime"                 . "#00FF00")
                        ("LimeGreen"            . "#32CD32")
                        ("Linen"                . "#FAF0E6")
                        ("Magenta"              . "#FF00FF")
                        ("Maroon"               . "#800000")
                        ("MediumAquaMarine"     . "#66CDAA")
                        ("MediumBlue"           . "#0000CD")
                        ("MediumOrchid"         . "#BA55D3")
                        ("MediumPurple"         . "#9370DB")
                        ("MediumSeaGreen"       . "#3CB371")
                        ("MediumSlateBlue"      . "#7B68EE")
                        ("MediumSpringGreen"    . "#00FA9A")
                        ("MediumTurquoise"      . "#48D1CC")
                        ("MediumVioletRed"      . "#C71585")
                        ("MidnightBlue"         . "#191970")
                        ("MintCream"            . "#F5FFFA")
                        ("MistyRose"            . "#FFE4E1")
                        ("Moccasin"             . "#FFE4B5")
                        ("NavajoWhite"          . "#FFDEAD")
                        ("Navy"                 . "#000080")
                        ("OldLace"              . "#FDF5E6")
                        ("Olive"                . "#808000")
                        ("OliveDrab"            . "#6B8E23")
                        ("Orange"               . "#FFA500")
                        ("OrangeRed"            . "#FF4500")
                        ("Orchid"               . "#DA70D6")
                        ("PaleGoldenRod"        . "#EEE8AA")
                        ("PaleGreen"            . "#98FB98")
                        ("PaleTurquoise"        . "#AFEEEE")
                        ("PaleVioletRed"        . "#DB7093")
                        ("PapayaWhip"           . "#FFEFD5")
                        ("PeachPuff"            . "#FFDAB9")
                        ("Peru"                 . "#CD853F")
                        ("Pink"                 . "#FFC0CB")
                        ("Plum"                 . "#DDA0DD")
                        ("PowderBlue"           . "#B0E0E6")
                        ("Purple"               . "#800080")
                        ("RebeccaPurple"        . "#663399")
                        ("Red"                  . "#FF0000")
                        ("RosyBrown"            . "#BC8F8F")
                        ("RoyalBlue"            . "#4169E1")
                        ("SaddleBrown"          . "#8B4513")
                        ("Salmon"               . "#FA8072")
                        ("SandyBrown"           . "#F4A460")
                        ("SeaGreen"             . "#2E8B57")
                        ("SeaShell"             . "#FFF5EE")
                        ("Sienna"               . "#A0522D")
                        ("Silver"               . "#C0C0C0")
                        ("SkyBlue"              . "#87CEEB")
                        ("SlateBlue"            . "#6A5ACD")
                        ("SlateGray"            . "#708090")
                        ("SlateGrey"            . "#708090")
                        ("Snow"                 . "#FFFAFA")
                        ("SpringGreen"          . "#00FF7F")
                        ("SteelBlue"            . "#4682B4")
                        ("Tan"                  . "#D2B48C")
                        ("Teal"                 . "#008080")
                        ("Thistle"              . "#D8BFD8")
                        ("Tomato"               . "#FF6347")
                        ("Turquoise"            . "#40E0D0")
                        ("Violet"               . "#EE82EE")
                        ("Wheat"                . "#F5DEB3")
                        ("White"                . "#FFFFFF")
                        ("WhiteSmoke"           . "#F5F5F5")
                        ("Yellow"               . "#FFFF00")
                        ("YellowGreen"          . "#9ACD32")))

    (setf (gethash (string-downcase (car color-pair))
                   web-colors)
          (string-downcase (cdr color-pair))))

  (defun web-color->hex-color (web-color)
    (first
     (multiple-value-list
      (gethash (string-downcase web-color) web-colors)))))

(let ((cached-photos (make-hash-table :test #'equal)))

  (defun get-photo-id (hex-color)
    (gethash hex-color cached-photos))

  (defun (setf get-photo-id) (new-value hex-color)
    (setf (gethash hex-color cached-photos) new-value)))

(flet ((split-by-one-space (string)
         (remove-if (lambda (s) (zerop (length s)))
                    (loop :for i = 0 :then (1+ j)
                          :as j = (position #\Space string :start i)
                          :collect (subseq string i j)
                          :while j))))

  (defun parse-web-color (text)
    (dolist (word (split-by-one-space text))
      (when-let ((result (web-color->hex-color word)))
        (return-from parse-web-color result)))))

(defun normalize-hex-color (hex-color)
  (when hex-color
    (string-downcase
     (if (= 7 (length hex-color))
         hex-color
         (let ((result '(#\#)))
           (dolist (c (coerce (subseq hex-color 1) 'list))
             (push c result)
             (push c result))
           (coerce (nreverse result) 'string))))))

(let ((hex-color-scanner (create-scanner "#([a-fA-F0-9]{3}){1,2}")))

  (defun parse-hex-color (text)
    (normalize-hex-color
     (if-let ((values (scan hex-color-scanner text)))
       (multiple-value-bind (start end) values
         (string-downcase (subseq text start end)))
       (parse-web-color text)))))

(defun draw-picture (file width height hex)
  (let ((png (make-instance 'zpng:pixel-streamed-png
                            :color-type :truecolor
                            :width width
                            :height height)))
    (with-open-file (stream file
                            :direction :output
                            :if-exists :supersede
                            :if-does-not-exist :create
                            :element-type '(unsigned-byte 8))
      (start-png png stream)
      (dotimes (_ (* width height))
        (write-pixel hex png))
      (finish-png png))))

(defun hex-color->rgb (hex-color)
  (loop :for start :from 1 :below 7 :by 2
        :for end = (+ start 2)
        :for hex = (subseq hex-color start end)
        :collect (parse-integer hex :radix 16)))

(defun make-photo-file (hex-color)
  (let ((file #p"temp.png"))
    (draw-picture file 100 100 (hex-color->rgb hex-color))
    file))

(defun send-photo-file (bot chat-id file-path)
  (let* ((response (http-request
                    (concatenate 'string (endpoint bot) "sendPhoto")
                    :method :post
                    :parameters `(("chat_id" . ,(write-to-string chat-id))
                                  ("photo" . ,file-path))
                    :form-data t))
         (json (decode-json-from-string
                (map 'string #'code-char response))))

    (flet ((get-body (akey) (setq json (rest (assoc akey json)))))
      (get-body 'result)
      (setq json (first (get-body 'photo)))
      (get-body 'file--id))))

(defun send-picture (bot chat-id hex-color)
  (if-let ((photo-id (get-photo-id hex-color)))
      (send-photo bot chat-id photo-id)

    (let* ((file (make-photo-file hex-color))
           (photo-id (send-photo-file bot chat-id file)))
      (setf (get-photo-id hex-color) photo-id))))

(defun respond-to-update (bot update)
  (let* ((message (access update 'message))
         (text    (access message 'text))
         (chat-id (access message 'chat 'id)))

    (if-let ((hex-color (parse-hex-color text)))
      (send-picture bot chat-id hex-color)
      (send-message bot chat-id
                    (format nil "Oops" text)))))

(let ((bot (make-bot (sb-unix::posix-getenv "TELEGRAM_BOT_TOKEN")))
      (stop-bot nil))

  (defun stop-bot ()
    (setq stop-bot t))

  (defun start-bot ()
    (setq stop-bot nil)
    (loop :until stop-bot do
      (loop :for update :across (get-updates bot)
            :do (respond-to-update bot update))
      (sleep 2))))
